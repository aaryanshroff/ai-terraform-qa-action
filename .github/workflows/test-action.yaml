name: "Validate Heimdall Action"

on:
  pull_request:
    branches: ["master"]
    paths:
      - ".github/workflows/test-action.yml"
      - "src/**"
      - "terraform/environments/test/**"
      - "Dockerfile"
      - "action.yaml"

jobs:
  infrastructure-validation:
    name: "Validate Terraform Security"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      id-token: write  # For OIDC
      contents: read

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_TEST_ROLE_ARN }}
          aws-region: us-west-2
          role-session-name: heimdall-test-${{ github.run_id }}

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.11.3"
          terraform_wrapper: false

      - name: "Initialize Test Infrastructure"
        working-directory: ./terraform/environments/test
        run: |
          terraform init -input=false
          terraform validate

      - name: "Deploy Test Resources"
        id: deploy
        working-directory: ./terraform/environments/test
        run: |
          terraform apply -auto-approve -input=false
          terraform output -json > tf_output.json
          echo "TF_OUTPUT_FILE=tf_output.json" >> $GITHUB_OUTPUT

      - name: "Validate Infrastructure Security"
        uses: ./
        id: security-check
        with:
          tf_output_path: ${{ steps.deploy.outputs.TF_OUTPUT_FILE }}
          llm_provider: "gemini"
          api_key: "${{ secrets.HEIMDALL_TEST_KEY }}"
          failure_strategy: "alert-only"

      - name: "Evaluate Validation Results"
        if: always()
        run: |
          if [[ "${{ steps.security-check.outputs.infrastructure_status }}" != "validated" ]]; then
            echo "::error::Validation failed: ${{ steps.security-check.outputs.execution_logs }}"
            exit 1
          fi
          echo "âœ… Infrastructure validation passed"

      - name: "Destroy Test Resources"
        if: always()
        working-directory: ./terraform/environments/test
        run: terraform destroy -auto-approve -input=false